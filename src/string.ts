/**
 * Generates an array of characters between the startChar and endChar, inclusive.
 *
 * @param {string} startChar
 * The first character of the array.
 *
 * @param {string} endChar
 * The last character of the array.
 *
 * @return {string[]}
 * An array of characters from startChar to endChar.
 *
 * @example
 * generateChars('a', 'd') // ['a', 'b', 'c', 'd']
 */
export function generateChars(startChar: string, endChar: string): string[] {
  const chars = []
  const j = endChar.charCodeAt(0)

  for (let i = startChar.charCodeAt(0); i <= j; ++i) {
    chars.push(String.fromCharCode(i))
  }

  return chars
}

/**
 * Capitalizes the first letter of a given string.
 *
 * @param {string} str
 * The string to capitalize.
 *
 * @return {string}
 * The capitalized string.
 *
 * @example
 * capitalize('hello') // 'Hello'
 */
export function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1)
}

/**
 * Returns a randomly generated token string.
 *
 * @return {string}
 * The token string generated by concatenating a random number and a base36 string after slicing off the first 2 characters.
 *
 * @example
 * randomToken() // '6c9qicypz1'
 */
export function randomToken(): string {
  return Math.random().toString(36).slice(2)
}

/**
 * Repeats every other character in the given string a specified number of times.
 *
 * @param {string} str
 * The input string to repeat characters from.
 *
 * @param {number} repeats
 * The number of times to repeat each character.
 *
 * @return {string}
 * The modified string with every other character repeated.
 *
 * @example
 * repeatEveryChars('abc', 2) // 'aabbcc'
 */
export function repeatEveryChars(str: string, repeats: number): string {
  let result = ''

  for (const char of str) {
    result += char.repeat(repeats)
  }

  return result
}

export interface DifferenceResult {
  index: number
  old?: string
  new?: string
}

export function getDifference(
  leftStr: string,
  rightStr: string
): DifferenceResult[] {
  const differenceResult: DifferenceResult[] = []
  if (leftStr === rightStr) return differenceResult

  for (
    let index = 0;
    index < Math.max(leftStr.length, rightStr.length);
    index++
  ) {
    if (leftStr[index] !== rightStr[index]) {
      differenceResult.push({
        index: index,
        old: leftStr[index],
        new: rightStr[index]
      })
    }
  }

  return differenceResult
}
